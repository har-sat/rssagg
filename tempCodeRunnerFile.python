import typing
from typing import List

def solution(dataSizes : List[int], threshold: int):
    N = len(dataSizes)
    if N == 0:
        return 0

    prefix = [dataSizes[0]]
    for d in dataSizes[1:]:
        prefix.append(prefix[-1] + d)
    
    def valid(i, l):
        s = prefix[i - l + 1]
        if i > 0:
            s -= 2 * prefix[i - 1]
        return s <= threshold
    
    def check_size(l):
        for i in range(N - l + 1):
            if valid(i, l):
                return True
        return False


    l, r = 1, N
    res = 0
    while l <= r:
        m = (l + r) //2
        if (check_size(m)):
            l = m + 1
            res = m
        else:
            r = m - 1
    return res

def brute_solution(dataSizes: List[int], threshold: int):
    N = len(dataSizes)
    if N == 0:
        return 0

    prefix = [dataSizes[0]]
    for d in dataSizes[1:]:
        prefix.append(prefix[-1] + d)
    
    def valid(i, l):
        s = prefix[i - l + 1]
        if i > 0:
            s -= 2 * prefix[i - 1]
        return s <= threshold

    res = 0
    for l in range(1, N + 1):
        for i in range(N - l + 1):
            if valid(i, l):
                print(prefix[i:i + l])
                res = l
                break
    return res
    



A = [1, 2, 3, 4]
print(f'solution: {solution(A, 5)}')
print(f'brute solution: {brute_solution(A, 5)}')